//from url: https://www.c-sharpcorner.com/article/how-to-do-simple-login-with-email-id-in-flutter-using-google-firebase/ 

//dependencies
firebase_auth: ^0.15.2      
google_sign_in: ^4.1.0  

//Google Sign-In
Future < FirebaseUser > googleSignin(BuildContext context) async {  
    FirebaseUser currentUser;  
    try {  
        final GoogleSignInAccount googleUser = await googleSignIn.signIn();  
        final GoogleSignInAuthentication googleAuth = await googleUser.authentication;  
        final AuthCredential credential = GoogleAuthProvider.getCredential(accessToken: googleAuth.accessToken, idToken: googleAuth.idToken, );  
        final FirebaseUser user = await auth.signInWithCredential(credential);  
        assert(user.email != null);  
        assert(user.displayName != null);  
        assert(!user.isAnonymous);  
        assert(await user.getIdToken() != null);  
        currentUser = await auth.currentUser();  
        assert(user.uid == currentUser.uid);  
        print(currentUser);  
        print("User Name : ${currentUser.displayName}");  
    } catch (e) {  
        handleError(e);  
        return currentUser;  
    }  
}  

//Firebase Sign-in using email & password
Future < FirebaseUser > signIn(String email, String password) async {    
    Try {    
        FirebaseUser user = await auth.signInWithEmailAndPassword(email: email, password: password);    
        assert(user != null);    
        assert(await user.getIdToken() != null);    
        final FirebaseUser currentUser = await auth.currentUser();    
        assert(user.uid == currentUser.uid);    
        return user;    
    } catch (e) {    
        handleError(e);    
        return null;    
    }    
} 

//Google Sign Up using email & password
Future < FirebaseUser > signUp(email, password) async {  
    try {  
        FirebaseUser user = await auth.createUserWithEmailAndPassword(email: email, password: password);  
        assert(user != null);  
        assert(await user.getIdToken() != null);  
        return user;  
    } catch (e) {  
        handleError(e);  
        return null;  
    }  
}  

//Google Sign-Out
Future < bool > googleSignout() async {  
    await auth.signOut();  
    await googleSignIn.signOut();  
    return true;  
   }  
} 
